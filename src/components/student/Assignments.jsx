import React, { useState } from 'react';
import styles from './Assignments.module.css';

function Assignments() {
    const [filter, setFilter] = useState('all');
    const [sortBy, setSortBy] = useState('deadline');

    const assignments = [
        {
            id: 1,
            subject: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            title: '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏',
            deadline: '2025-08-10T23:59',
            status: 'pending',
            urgency: 'urgent',
            description: '–†–µ—à–µ–Ω–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤',
            type: 'test',
            points: 100
        },
        {
            id: 2,
            subject: '–§–∏–∑–∏–∫–∞',
            title: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ5',
            deadline: '2025-08-12T18:00',
            status: 'pending',
            urgency: 'soon',
            description: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∏–Ω–¥—É–∫—Ü–∏–∏',
            type: 'lab',
            points: 50
        },
        {
            id: 3,
            subject: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
            title: '–≠—Å—Å–µ: My Future Career',
            deadline: '2025-08-14T23:59',
            status: 'submitted',
            urgency: 'normal',
            description: '–≠—Å—Å–µ –Ω–∞ 300-400 —Å–ª–æ–≤ –æ –±—É–¥—É—â–µ–π –∫–∞—Ä—å–µ—Ä–µ',
            type: 'essay',
            points: 75,
            grade: null
        },
        {
            id: 4,
            subject: '–ò—Å—Ç–æ—Ä–∏—è',
            title: '–†–µ—Ñ–µ—Ä–∞—Ç: –ü–µ—Ç—Ä I',
            deadline: '2025-08-06T12:00',
            status: 'graded',
            urgency: 'completed',
            description: '–†–µ—Ñ–æ—Ä–º—ã –ü–µ—Ç—Ä–∞ I –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –†–æ—Å—Å–∏—é',
            type: 'project',
            points: 100,
            grade: 5
        },
        {
            id: 5,
            subject: '–•–∏–º–∏—è',
            title: '–¢–µ—Å—Ç: –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è',
            deadline: '2025-08-15T12:00',
            status: 'pending',
            urgency: 'normal',
            description: '–û—Å–Ω–æ–≤—ã –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏, —É–≥–ª–µ–≤–æ–¥–æ—Ä–æ–¥—ã',
            type: 'test',
            points: 80
        },
        {
            id: 6,
            subject: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
            title: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è',
            deadline: '2025-08-18T23:59',
            status: 'pending',
            urgency: 'normal',
            description: '–ê–Ω–∞–ª–∏–∑ "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è" –î–æ—Å—Ç–æ–µ–≤—Å–∫–æ–≥–æ',
            type: 'essay',
            points: 90
        }
    ];

    const filters = [
        { value: 'all', label: '–í—Å–µ –∑–∞–¥–∞–Ω–∏—è', count: assignments.length },
        { value: 'pending', label: '–û–∂–∏–¥–∞—é—Ç', count: assignments.filter(a => a.status === 'pending').length },
        { value: 'submitted', label: '–°–¥–∞–Ω—ã', count: assignments.filter(a => a.status === 'submitted').length },
        { value: 'graded', label: '–û—Ü–µ–Ω–µ–Ω—ã', count: assignments.filter(a => a.status === 'graded').length }
    ];

    const getStatusClass = (status) => {
        switch (status) {
            case 'pending': return styles.statusPending;
            case 'submitted': return styles.statusSubmitted;
            case 'graded': return styles.statusGraded;
            default: return styles.statusPending;
        }
    };

    const getUrgencyClass = (urgency) => {
        switch (urgency) {
            case 'urgent': return styles.urgent;
            case 'soon': return styles.soon;
            case 'normal': return styles.normal;
            case 'completed': return styles.completed;
            default: return styles.normal;
        }
    };

    const getTypeIcon = (type) => {
        switch (type) {
            case 'test': return 'üìù';
            case 'lab': return 'üî¨';
            case 'essay': return 'üìÑ';
            case 'project': return 'üìä';
            default: return 'üìö';
        }
    };

    const getStatusText = (status) => {
        switch (status) {
            case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
            case 'submitted': return '–°–¥–∞–Ω–æ';
            case 'graded': return '–û—Ü–µ–Ω–µ–Ω–æ';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    const formatDeadline = (deadline) => {
        const date = new Date(deadline);
        const now = new Date();
        const diff = date.getTime() - now.getTime();
        const days = Math.ceil(diff / (1000 * 60 * 60 * 24));
        
        if (days < 0) return '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ';
        if (days === 0) return '–°–µ–≥–æ–¥–Ω—è';
        if (days === 1) return '–ó–∞–≤—Ç—Ä–∞';
        return `${days} –¥–Ω–µ–π`;
    };

    const filteredAssignments = assignments.filter(assignment => {
        if (filter === 'all') return true;
        return assignment.status === filter;
    });

    const generateAIAssignment = () => {
        alert('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò (–¥–µ–º–æ)');
    };

    return (
        <div className={styles.assignmentsContainer}>
            <div className={styles.assignmentsHeader}>
                <div className={styles.headerContent}>
                    <h2>üìù –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è</h2>
                    <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å</p>
                </div>
                <button className={styles.generateBtn} onClick={generateAIAssignment}>
                    ü§ñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ò–ò
                </button>
            </div>

            <div className={styles.filtersSection}>
                <div className={styles.filterTabs}>
                    {filters.map(filterItem => (
                        <button
                            key={filterItem.value}
                            className={`${styles.filterTab} ${filter === filterItem.value ? styles.active : ''}`}
                            onClick={() => setFilter(filterItem.value)}
                        >
                            {filterItem.label}
                            <span className={styles.filterCount}>{filterItem.count}</span>
                        </button>
                    ))}
                </div>

                <div className={styles.sortSection}>
                    <select 
                        className={styles.sortSelect}
                        value={sortBy}
                        onChange={(e) => setSortBy(e.target.value)}
                    >
                        <option value="deadline">–ü–æ –¥–µ–¥–ª–∞–π–Ω—É</option>
                        <option value="subject">–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É</option>
                        <option value="status">–ü–æ —Å—Ç–∞—Ç—É—Å—É</option>
                        <option value="points">–ü–æ –±–∞–ª–ª–∞–º</option>
                    </select>
                </div>
            </div>

            <div className={styles.assignmentsGrid}>
                {filteredAssignments.length > 0 ? (
                    filteredAssignments.map(assignment => (
                        <div key={assignment.id} className={`${styles.assignmentCard} ${getUrgencyClass(assignment.urgency)}`}>
                            <div className={styles.assignmentHeader}>
                                <div className={styles.assignmentSubject}>
                                    <span className={styles.typeIcon}>{getTypeIcon(assignment.type)}</span>
                                    {assignment.subject}
                                </div>
                                <span className={`${styles.assignmentStatus} ${getStatusClass(assignment.status)}`}>
                                    {getStatusText(assignment.status)}
                                </span>
                            </div>

                            <div className={styles.assignmentContent}>
                                <h3 className={styles.assignmentTitle}>{assignment.title}</h3>
                                <p className={styles.assignmentDescription}>{assignment.description}</p>
                                
                                <div className={styles.assignmentMeta}>
                                    <div className={styles.deadline}>
                                        ‚è∞ {formatDeadline(assignment.deadline)}
                                    </div>
                                    <div className={styles.points}>
                                        üíé {assignment.points} –±–∞–ª–ª–æ–≤
                                    </div>
                                </div>

                                {assignment.grade && (
                                    <div className={styles.gradeSection}>
                                        <span className={styles.gradeLabel}>–û—Ü–µ–Ω–∫–∞:</span>
                                        <span className={`${styles.grade} ${styles[`grade${assignment.grade}`]}`}>
                                            {assignment.grade}/5
                                        </span>
                                    </div>
                                )}
                            </div>

                            <div className={styles.assignmentActions}>
                                {assignment.status === 'pending' && (
                                    <>
                                        <button className={`${styles.actionBtn} ${styles.primaryBtn}`}>
                                            {assignment.type === 'test' ? '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' : 'üì§ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É'}
                                        </button>
                                        <button className={`${styles.actionBtn} ${styles.secondaryBtn}`}>
                                            üìã –î–µ—Ç–∞–ª–∏
                                        </button>
                                    </>
                                )}
                                
                                {assignment.status === 'submitted' && (
                                    <button className={`${styles.actionBtn} ${styles.secondaryBtn}`}>
                                        üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                    </button>
                                )}
                                
                                {assignment.status === 'graded' && (
                                    <button className={`${styles.actionBtn} ${styles.secondaryBtn}`}>
                                        üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤
                                    </button>
                                )}
                            </div>
                        </div>
                    ))
                ) : (
                    <div className={styles.emptyState}>
                        <div className={styles.emptyIcon}>üìù</div>
                        <h3 className={styles.emptyTitle}>–ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                        <p className={styles.emptyText}>
                            –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π
                        </p>
                    </div>
                )}
            </div>

            {filteredAssignments.length > 0 && (
                <div className={styles.summarySection}>
                    <div className={styles.summaryCards}>
                        <div className={styles.summaryCard}>
                            <div className={styles.summaryIcon}>üìä</div>
                            <div className={styles.summaryContent}>
                                <div className={styles.summaryValue}>
                                    {assignments.filter(a => a.status === 'pending').length}
                                </div>
                                <div className={styles.summaryLabel}>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</div>
                            </div>
                        </div>

                        <div className={styles.summaryCard}>
                            <div className={styles.summaryIcon}>‚è∞</div>
                            <div className={styles.summaryContent}>
                                <div className={styles.summaryValue}>
                                    {assignments.filter(a => a.urgency === 'urgent').length}
                                </div>
                                <div className={styles.summaryLabel}>–°—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</div>
                            </div>
                        </div>

                        <div className={styles.summaryCard}>
                            <div className={styles.summaryIcon}>üíé</div>
                            <div className={styles.summaryContent}>
                                <div className={styles.summaryValue}>
                                    {assignments.filter(a => a.status === 'pending').reduce((sum, a) => sum + a.points, 0)}
                                </div>
                                <div className={styles.summaryLabel}>–í–æ–∑–º–æ–∂–Ω—ã—Ö –±–∞–ª–ª–æ–≤</div>
                            </div>
                        </div>

                        <div className={styles.summaryCard}>
                            <div className={styles.summaryIcon}>üéØ</div>
                            <div className={styles.summaryContent}>
                                <div className={styles.summaryValue}>
                                    {Math.round((assignments.filter(a => a.status === 'graded').length / assignments.length) * 100)}%
                                </div>
                                <div className={styles.summaryLabel}>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}

export default Assignments;