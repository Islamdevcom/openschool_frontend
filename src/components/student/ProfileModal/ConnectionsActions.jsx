import React, { useState } from "react";
import styles from "./ConnectionsActions.module.css";
import { useAuth } from "../../../context/AuthContext";
import { useInviteCode } from "../../../api/student";

function ConnectionsActions() {
    const { token } = useAuth();

    const [activeTab, setActiveTab] = useState('teacher');
    const [teacherCode, setTeacherCode] = useState('');
    const [selectedGroup, setSelectedGroup] = useState('');
    const [friendCode, setFriendCode] = useState('STUD7X2K');
    const [friendName, setFriendName] = useState('');

    const [joinLoading, setJoinLoading] = useState(false);
    const [joinError, setJoinError] = useState('');

    const tabs = [
        { id: 'teacher', icon: 'üë®‚Äçüéì', label: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é' },
        { id: 'friend', icon: 'üë´', label: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞' },
        { id: 'actions', icon: '‚ö°', label: '–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è' }
    ];

    const quickActions = [
        { id: 'plan', icon: 'üìù', label: '–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å', color: '#7C3AED' },
        { id: 'test', icon: 'üìä', label: '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', color: '#F59E0B' },
        { id: 'goals', icon: 'üéØ', label: '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏', color: '#EF4444' },
        { id: 'review', icon: 'üìö', label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª', color: '#10B981' }
    ];

    const handleJoinTeacher = async () => {
        if (!teacherCode.trim() || !token) {
            setJoinError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ –∫–æ–¥");
            return;
        }

        setJoinLoading(true);
        setJoinError('');
        try {
            await useInviteCode({ code: teacherCode.trim(), token }); // ‚¨Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            setTeacherCode('');
            window.dispatchEvent(new CustomEvent('teachers:refresh'));
            alert('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!');
        } catch (e) {
            setJoinError(e.message);
        } finally {
            setJoinLoading(false);
        }
    };

    const copyFriendCode = () => {
        navigator.clipboard.writeText(friendCode);
        alert('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    };

    const generateNewCode = () => {
        const newCode = 'STUD' + Math.random().toString(36).substr(2, 4).toUpperCase();
        setFriendCode(newCode);
    };

    const handleQuickAction = (actionId) => {
        alert(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: ${actionId}`);
    };

    const renderTeacherTab = () => (
        <div className={styles.tabContent}>
            <div className={styles.headerSection}>
                <h3>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é</h3>
                <p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –µ–≥–æ –∫–ª–∞—Å—Å—É.</p>
            </div>

            <div className={styles.codeSection}>
                <div className={styles.inputGroup}>
                    <label className={styles.inputLabel}>–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</label>
                    <input
                        type="text"
                        value={teacherCode}
                        onChange={(e) => setTeacherCode(e.target.value.toUpperCase())}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä SUE8GL)"
                        className={styles.codeInput}
                        maxLength={8}
                    />
                </div>

                <div className={styles.inputGroup}>
                    <label className={styles.inputLabel}>–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
                    <select 
                        value={selectedGroup}
                        onChange={(e) => setSelectedGroup(e.target.value)}
                        className={styles.groupSelect}
                    >
                        <option value="">–ë–µ–∑ –≥—Ä—É–ø–ø—ã</option>
                        <option value="10a">10–ê –∫–ª–∞—Å—Å</option>
                        <option value="math">–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä—É–∂–æ–∫</option>
                        <option value="ege">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠</option>
                    </select>
                </div>

                <button 
                    onClick={handleJoinTeacher}
                    disabled={!teacherCode.trim() || joinLoading}
                    className={`${styles.primaryBtn} ${(!teacherCode.trim() || joinLoading) ? styles.disabled : ''}`}
                >
                    {joinLoading ? "‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..." : "üìö –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"}
                </button>
            </div>

            {joinError && (
                <div className={styles.infoBox} style={{ color: '#B91C1C', backgroundColor: '#FEE2E2' }}>
                    ‚ö†Ô∏è {joinError}
                </div>
            )}

            <div className={styles.infoBox}>
                ‚ö†Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π. –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ —É—á–µ–Ω–∏–∫–∞ –∫–æ–¥ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º.
            </div>
        </div>
    );

    const renderFriendTab = () => (
        <div className={styles.tabContent}>
            <div className={styles.headerSection}>
                <h3>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞</h3>
                <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –æ–Ω —Å–º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞–º –∫–∞–∫ —É—á–µ–±–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä.</p>
            </div>

            <div className={styles.codeSection}>
                <div className={styles.codeDisplay}>
                    <div className={styles.codeValue}>{friendCode}</div>
                    <div className={styles.codeActions}>
                        <button onClick={copyFriendCode} className={styles.copyBtn}>
                            üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
                        </button>
                        <button onClick={generateNewCode} className={styles.generateBtn}>
                            üîÑ –ù–æ–≤—ã–π –∫–æ–¥
                        </button>
                    </div>
                </div>

                <div className={styles.inputGroup}>
                    <label className={styles.inputLabel}>–ò–º—è –¥—Ä—É–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
                    <input
                        type="text"
                        value={friendName}
                        onChange={(e) => setFriendName(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞"
                        className={styles.textInput}
                    />
                </div>

                <button className={styles.shareBtn}>
                    üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                </button>
            </div>

            <div className={styles.infoBox}>
                üí° –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: –≤–∞—à –¥—Ä—É–≥ —Å–º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –Ω–µ–π –∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
            </div>
        </div>
    );

    const renderActionsTab = () => (
        <div className={styles.tabContent}>
            <div className={styles.headerSection}>
                <h3>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                <p>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.</p>
            </div>

            <div className={styles.actionsGrid}>
                {quickActions.map(action => (
                    <div 
                        key={action.id}
                        className={styles.actionCard}
                        onClick={() => handleQuickAction(action.id)}
                        style={{ borderLeftColor: action.color }}
                    >
                        <div className={styles.actionIcon}>{action.icon}</div>
                        <div className={styles.actionLabel}>{action.label}</div>
                        <div className={styles.actionArrow}>‚Üí</div>
                    </div>
                ))}
            </div>

            <div className={styles.recentActions}>
                <h4>–ù–µ–¥–∞–≤–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</h4>
                <div className={styles.recentList}>
                    <div className={styles.recentItem}>üìù –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</div>
                    <div className={styles.recentItem}>üìä –ü—Ä–æ–π–¥–µ–Ω —Ç–µ—Å—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ</div>
                    <div className={styles.recentItem}>üéØ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å: —É–ª—É—á—à–∏—Ç—å —Ñ–∏–∑–∏–∫—É</div>
                </div>
            </div>
        </div>
    );

    return (
        <div className={styles.container}>
            <div className={styles.header}>
                <h2>ü§ù –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è</h2>
                <p>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</p>
            </div>

            <div className={styles.tabs}>
                {tabs.map(tab => (
                    <button
                        key={tab.id}
                        className={`${styles.tab} ${activeTab === tab.id ? styles.activeTab : ''}`}
                        onClick={() => setActiveTab(tab.id)}
                    >
                        <span className={styles.tabIcon}>{tab.icon}</span>
                        <span className={styles.tabLabel}>{tab.label}</span>
                    </button>
                ))}
            </div>

            <div className={styles.content}>
                {activeTab === 'teacher' && renderTeacherTab()}
                {activeTab === 'friend' && renderFriendTab()}
                {activeTab === 'actions' && renderActionsTab()}
            </div>
        </div>
    );
}

export default ConnectionsActions;
