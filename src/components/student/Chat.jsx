import React, { useState, useRef, useEffect } from 'react';
import styles from './Chat.module.css';

function Chat() {
    const [messages, setMessages] = useState([
        {
            id: 1,
            type: 'ai',
            text: '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º, –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
        }
    ]);
    const [inputValue, setInputValue] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const messagesEndRef = useRef(null);

    const quickPrompts = [
        '–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞',
        '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ',
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ö–†',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Å—Å–µ'
    ];

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const sendMessage = () => {
        if (inputValue.trim()) {
            const userMessage = {
                id: Date.now(),
                type: 'user',
                text: inputValue
            };

            setMessages(prev => [...prev, userMessage]);
            setInputValue('');
            setIsTyping(true);

            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
            setTimeout(() => {
                const aiMessage = {
                    id: Date.now() + 1,
                    type: 'ai',
                    text: `–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å: "${inputValue}". –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —è –±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–æ–º–æ—â—å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.`
                };
                setMessages(prev => [...prev, aiMessage]);
                setIsTyping(false);
            }, 1000);
        }
    };

    const handleQuickPrompt = (prompt) => {
        setInputValue(prompt);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    };

    return (
        <div className={styles.chatContainer}>
            <div className={styles.chatHeader}>
                <div className={styles.chatHeaderContent}>
                    <h2>ü§ñ –ü–æ–º–æ—â–Ω–∏–∫ –ò–ò</h2>
                    <p>–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—á–µ–±–µ</p>
                </div>
                <div className={styles.chatStatus}>
                    <div className={styles.statusIndicator}></div>
                    <span>–û–Ω–ª–∞–π–Ω</span>
                </div>
            </div>
            
            <div className={styles.chatMessages}>
                {messages.map((message) => (
                    <div key={message.id} className={`${styles.message} ${styles[message.type]}`}>
                        <div className={styles.messageBubble}>
                            {message.text}
                        </div>
                    </div>
                ))}
                
                {isTyping && (
                    <div className={`${styles.message} ${styles.ai}`}>
                        <div className={styles.messageBubble}>
                            <div className={styles.typingIndicator}>
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        </div>
                    </div>
                )}
                
                <div ref={messagesEndRef} />
            </div>
            
            <div className={styles.chatInputContainer}>
                <div className={styles.chatInputWrapper}>
                    <input
                        type="text"
                        className={styles.chatInput}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        onKeyPress={handleKeyPress}
                    />
                    <button 
                        className={styles.chatSendBtn}
                        onClick={sendMessage}
                        disabled={!inputValue.trim()}
                    >
                        <span>üì§</span>
                    </button>
                </div>
                
                <div className={styles.quickPrompts}>
                    {quickPrompts.map((prompt, index) => (
                        <button
                            key={index}
                            className={styles.quickPrompt}
                            onClick={() => handleQuickPrompt(prompt)}
                        >
                            {prompt}
                        </button>
                    ))}
                </div>
            </div>
        </div>
    );
}

export default Chat;